plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.flywaydb.flyway' version '9.22.3'
}

group = 'cc.kertaskerja.manrisk'
version = '0.0.1-SNAPSHOT'
java {
    sourceCompatibility = '21'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'

    // Monitoring dependencies
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-core'

    compileOnly("org.projectlombok:lombok:1.18.38")
    annotationProcessor("org.projectlombok:lombok:1.18.38")

    testCompileOnly("org.projectlombok:lombok:1.18.38")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.38")
    runtimeOnly 'org.postgresql:postgresql'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

jar {
    enabled = false
}

def loadEnvFile() {
    def envFile = file('.env')
    if (envFile.exists()) {
        envFile.readLines().each { line ->
            if (line && !line.startsWith('#') && line.contains('=')) {
                def (key, value) = line.split('=', 2)
                if (!project.hasProperty(key)) {
                    project.ext[key] = value
                }
            }
        }
    }
}

loadEnvFile()

flyway {
    url = project.findProperty('DB_URL') ?: 'jdbc:postgresql://localhost:5432/manajemen_risiko'
    user = project.findProperty('DB_USERNAME') ?: 'majapahit'
    password = project.findProperty('DB_PASSWORD') ?: 'Madiun@123'
    locations = ['classpath:db/migration']
    baselineOnMigrate = true
    validateOnMigrate = true
}
