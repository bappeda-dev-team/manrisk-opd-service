plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'cc.kertaskerja.manrisk'
version = '0.0.1-SNAPSHOT'
java {
    sourceCompatibility = '21'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'
    
    runtimeOnly 'org.postgresql:postgresql'
    
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Ensure the JAR is executable
jar {
    enabled = false
}

bootBuildImage {
    imageName = "${project.name}"
    environment = ["BP_JVM_VERSION" : "21.*"]

    if (System.getProperty( "os.arch" ).toLowerCase().startsWith('aarch')) {
        builder = "paketobuildpacks/builder-jammy-buildpackless-tiny"
        buildpacks = [ "docker.io/paketobuildpacks/java" ]
    } else {
        builder = "docker.io/paketobuildpacks/builder-jammy-tiny"
    }


    docker {
        publishRegistry {
            username = project.findProperty("registryUsername")
            password = project.findProperty("registryToken")
            url = project.findProperty("registryUrl")
        }
    }
}
